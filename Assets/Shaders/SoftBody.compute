
struct Particle
{
    float3 x, xm1;
    float invm;
};

struct LengthConstraint
{
    int p1, p2;
    float l0;
};

struct VolumeConstraint
{
    int p1, p2, p3, p4;
    float V0;
};

struct Cube
{
    float3 min, max;
};


uniform float dt;
uniform float dtm1;
uniform float edgeCompliance;
uniform float volumeCompliance;
uniform float3 gravity;

uniform int nParticles;
uniform int nEdges;
uniform int nTets;
uniform int nTriangles;

uniform int nEdgeClusters;
uniform int currentEdgeCluster;
uniform StructuredBuffer<int> edgesInCluster;
uniform StructuredBuffer<int> edgeClusters;

uniform int nTetClusters;
uniform int currentTetCluster;
uniform StructuredBuffer<int> tetsInCluster;
uniform StructuredBuffer<int> tetClusters;

uniform RWStructuredBuffer<Particle> ps;
uniform StructuredBuffer<LengthConstraint> lc;
uniform StructuredBuffer<VolumeConstraint> vc;

uniform int nCubes;
uniform StructuredBuffer<Cube> sceneCubes;
uniform StructuredBuffer<int> potentialCollisions;

#pragma kernel integrate
[numthreads(64, 1, 1)]
void integrate(uint3 id : SV_DispatchThreadID)
{
    if (id.x < (uint) nParticles && ps[id.x].invm != 0.0f)
    {
        float3 v = (ps[id.x].x - ps[id.x].xm1) / dtm1 + gravity * dt;
        ps[id.x].xm1 = ps[id.x].x;
        ps[id.x].x += v * dt;
    }
}

#pragma kernel solveCollisions
[numthreads(64, 1, 1)]
void solveCollisions(uint3 id : SV_DispatchThreadID)
{
    if (id.x < (uint) nParticles)
    {
        for (int i = 0; i < nCubes; i++)
        {
            if (!potentialCollisions[i])
                continue;
            
            float tmin, tmax;
            Cube cube = sceneCubes[i];
            bool inCube = all(ps[id.x].x > cube.min) && all(ps[id.x].x < cube.max);
            
            float3 minDists = ps[id.x].x - cube.min;
            float3 maxDists = cube.max - ps[id.x].x;
            bool3 minDir = float3(all(minDists.x <= minDists) && all(minDists.x < maxDists),
                                   all(minDists.y <= minDists) && all(minDists.y < maxDists),
                                   all(minDists.z <= minDists) && all(minDists.z < maxDists));
            bool3 maxDir = float3(all(maxDists.x <= maxDists) && all(maxDists.x <= minDists),
                                   all(maxDists.y <= maxDists) && all(maxDists.y <= minDists),
                                   all(maxDists.z <= maxDists) && all(maxDists.z <= minDists));
            float3 qs = ps[id.x].xm1 * !(minDir || maxDir) + cube.min * minDir + cube.max * maxDir;
            
            ps[id.x].x = !inCube * ps[id.x].x + inCube * qs;
        }
    }
}

#pragma kernel solveEdges
[numthreads(64, 1, 1)]
void solveEdges(uint3 id : SV_DispatchThreadID)
{
    int firstEdge;
    for (int i = 0; i < currentEdgeCluster; i++)
    {
        firstEdge += edgesInCluster[i];
    }
    
    if (id.x < (uint) edgesInCluster[currentEdgeCluster])
    {
        float alpha = edgeCompliance / dt / dt;
        
        int edge = edgeClusters[firstEdge + id.x];
        LengthConstraint l = lc[edge];
        
        float3 d = ps[l.p1].x - ps[l.p2].x;
        float len = length(d);
        float3 grad = d / len;
        float C = len - l.l0;
        float s = -C / (ps[l.p1].invm + ps[l.p2].invm + alpha);
        
        ps[l.p1].x += grad * s * ps[l.p1].invm;
        ps[l.p2].x -= grad * s * ps[l.p2].invm;
    }
}

#pragma kernel solveVolumes
[numthreads(64, 1, 1)]
void solveVolumes(uint3 id : SV_DispatchThreadID)
{
    int firstTet;
    for (int i = 0; i < currentTetCluster; i++)
    {
        firstTet += tetsInCluster[i];
    }
    
    if (id.x < (uint) tetsInCluster[currentTetCluster])
    {
        float alpha = volumeCompliance / dt / dt;
        
        int tet = tetClusters[firstTet + id.x];
        VolumeConstraint v = vc[tet];
        
        float w = 0.0f;
        float3 temp[2];
        float3 grads[4];
       
        // Gradient particle 1
        temp[0] = ps[v.p4].x - ps[v.p2].x;
        temp[1] = ps[v.p3].x - ps[v.p2].x;
        grads[0] = cross(temp[0], temp[1]) / 6;
        w += ps[v.p1].invm * dot(grads[0], grads[0]);
        
        // Gradient particle 2
        temp[0] = ps[v.p3].x - ps[v.p1].x;
        temp[1] = ps[v.p4].x - ps[v.p1].x;
        grads[1] = cross(temp[0], temp[1]) / 6;
        w += ps[v.p2].invm * dot(grads[1], grads[1]);
        
        // Gradient particle 3
        temp[0] = ps[v.p4].x - ps[v.p1].x;
        temp[1] = ps[v.p2].x - ps[v.p1].x;
        grads[2] = cross(temp[0], temp[1]) / 6;
        w += ps[v.p3].invm * dot(grads[2], grads[2]);
        
        // Gradient particle 4
        temp[0] = ps[v.p2].x - ps[v.p1].x;
        temp[1] = ps[v.p3].x - ps[v.p1].x;
        grads[3] = cross(temp[0], temp[1]) / 6;
        w += ps[v.p4].invm * dot(grads[3], grads[3]);
        
        // Solve constraints
        float3 diffs[3];
        diffs[0] = ps[v.p2].x - ps[v.p1].x;
        diffs[1] = ps[v.p3].x - ps[v.p1].x;
        diffs[2] = ps[v.p4].x - ps[v.p1].x;
        float V = dot(cross(diffs[0], diffs[1]), diffs[2]) / 6;
        
        float C = V - v.V0;
        float s = -C / (w + alpha);
        
        ps[v.p1].x += grads[0] * s * ps[v.p1].invm;
        ps[v.p2].x += grads[1] * s * ps[v.p2].invm;
        ps[v.p3].x += grads[2] * s * ps[v.p3].invm;
        ps[v.p4].x += grads[3] * s * ps[v.p4].invm;
    }
}